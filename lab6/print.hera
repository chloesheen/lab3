BR(Program_Start)

SET(R5, 16)
CMP(R2, R5)
BNZ(Keyboard_2)

// -----------Keyboard 1-----------
SET(R1, 1)
CALL(FP_alt, getchar_ord)
CALL(FP_alt, putchar_ord)
RTI()

// ----------Keyboard 2------------
LABEL(Keyboard_2)
SET(R1, 0)
CALL(FP_alt, getchar_ord)

CMP(R2, R0) // Do nothing if you don't get a char
BZ(Return_From_Interrupt)

// ---Compare to Newline---
SET(R4, 10)
CMP(R2, R4)
BZ(Print_the_string)


// Append the character to the string
SET(R4, 0xd000) // Location of string in memory
LOAD(R3,0,R4)	 // r3 holds the length of string
INC(R3, 1)
ADD(R5, R4, R3) // R5 is the address in memory where we store the character
STORE(R2, 0, R5) // Store the character
STORE(R3, 0, R4) // Store the new length of the string in R4
RTI()

LABEL(Print_the_string)
	SET(R1, 0) // Screen 0
	SET(R2, 0xd000) //Address in memory
	CALL(FP_alt, print)
	SET(R2, 0xd000) //Address in memory
	STORE(R0, 0, R2)
	RTI()

LABEL(Return_From_Interrupt)
RTI()


//---------Main body of program-----------
LABEL(Program_Start)
BR(Program_Start)


//---------Function Definitions-----------
//register 1 which terminal
//returns to register 2
LABEL(getchar_ord)
OPCODE(0b0010110000010010)
RETURN(FP_alt, PC_ret)
HALT()

// putchar_ord function
//register 1 which terminal
//register 2 which character
LABEL(putchar_ord)
OPCODE(0b0010100000010010)
RETURN(FP_alt, PC_ret)
HALT()



LABEL(print)
MOVE(R9,FP_alt)		// calling function within function, we need to save 
MOVE(R10,PC_ret)
MOVE(R3,R2)
LOAD(R4,0,R3) //R4 is the length of the string
BZ(empty_str) //if there is an empty string go to the end of the program
INC(R3,1) // increment pointer
// Now, pull in the next char of the actual string (into R2)
LABEL(Top_of_loop)
        // Load in current char into R2
        LOAD(R2, 0, R3)
        INC(R3,1)
        CALL(FP_alt,putchar_ord)
        DEC(R4, 1) // decrement the length
BNZ(Top_of_loop) // keep looping as long as the length is not zero
LABEL(empty_str)
RETURN(R9, R10)
HALT()
