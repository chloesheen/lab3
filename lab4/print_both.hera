// Sujin Kay, Chloe Sheen, Lamiaa Dakir, Matthew Soulanille, Katherine Wu
// Implements the pseudocode at https://docs.google.com/document/d/12Tityu1BQqf-r3QSaZKNRXfYhage691zabpZsr0l1KE/edit

#define  WROTE_CS356_IO 1
#include <HERA.h>

//Checking if keyboard has a value
//if the keyboard 1 has a value then print it 
//else check keyboard 2

LABEL(top_of_loop)

	/* // Uncomment this to simulate an OS. Makes the whole thing a lot slower
	SET(R1, 20)
	LABEL(simulate_os)
	DEC(R1, 1)
	BNZ(simulate_os)
	*/
	
	// if keyboard0 has a character, display that character onto TTY0
	SET(R1,1) //Keyboard 1
	CALL(FP_alt, getchar_ord)
	CMP(R2,R0) // empty?
BS(no_val_K1) //if no value in keyboard 1 then check keyboard 2

	// otherwise, there’s a value, so print value
CALL(FP_alt, putchar_ord)  
		
LABEL(no_val_K1) //no value in K1, go to K2
SET(R1,0) //Keyboard 2
CALL(FP_alt, getchar_ord)
CMP(R2,R0) //empty?
BZ(top_of_loop) //if no value in keyboard 2, back to top of loop




/* if keyboard1 has a character, 
if that character is a newline, 
Display buffer of characters onto TTY1
 	else
		Add that character to the buffer
*/
SET(R4, 10) // newline character
CMP(R2, R4) // If we get a newline character
BZ(Print_the_string) // … Print the string

// Append the character to the string
SET(R4, 0xd000) // Location of string in memory
LOAD(R3,0,R4)	 // r3 holds the length of string
INC(R3, 1)
ADD(R5, R4, R3) // R5 is the address in memory where we store the character
STORE(R2, 0, R5) // Store the character
STORE(R3, 0, R4) // Store the new length of the string in R4
//CALL(FP_alt, putchar_ord)

BR(top_of_loop)
		
	LABEL(Print_the_string)
		SET(R1, 0) // Screen 0
		SET(R2, 0xd000) //Address in memory
		CALL(FP_alt, print)
		SET(R2, 0xd000) //Address in memory
		STORE(R0, 0, R2)
BR(top_of_loop)

HALT()
//register 1 which terminal
//returns to register 2
LABEL(getchar_ord)
OPCODE(0b0010110000010010)
RETURN(FP_alt, PC_ret)
HALT()

// putchar_ord function
//register 1 which terminal
//register 2 which character
LABEL(putchar_ord)
OPCODE(0b0010100000010010)
RETURN(FP_alt, PC_ret)
HALT()

//register 1 which terminal
//register 2 points to the string
LABEL(print)
MOVE(R9,FP_alt)		// calling function within function, we need to save 
MOVE(R10,PC_ret)
MOVE(R3,R2)
LOAD(R4,0,R3) //R4 is the length of the string
BZ(empty_str) //if there is an empty string go to the end of the program
INC(R3,1) // increment pointer
// Now, pull in the next char of the actual string (into R2)
LABEL(Top_of_loop)
        // Load in current char into R2
        LOAD(R2, 0, R3)
        INC(R3,1)
        CALL(FP_alt,putchar_ord)
        DEC(R4, 1) // decrement the length
BNZ(Top_of_loop) // keep looping as long as the length is not zero
LABEL(empty_str)
RETURN(R9, R10)
HALT()
